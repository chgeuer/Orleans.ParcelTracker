# Playing with priority queues

```elixir
Mix.install([
  {:treex, "~> 0.1.0"}
])
```

## The `PriorityQueue` data structure

The `PriorityQueue` module represents the pure functional data structure. It uses the [`:treex`](https://hexdocs.pm/treex/api-reference.html) module to have a better UX interacting with Erlang's `gb_trees` data structure.

```elixir
defmodule PriorityQueue do
  defstruct size: 0, treex: nil

  # def empty?(%__MODULE__{treex: tree}), do: tree |> Treex.empty?()
  def empty?(%__MODULE__{size: n}), do: n == 0
  def empty?(_), do: false

  def size(%__MODULE__{size: n}), do: n

  def new, do: %__MODULE__{size: 0, treex: Treex.empty()}

  def push(pq = %__MODULE__{size: n, treex: tree}, priority, value) when is_integer(priority) do
    tree =
      case tree |> Treex.lookup(priority) do
        {:value, queue} -> tree |> Treex.update!(priority, :queue.in(value, queue))
        :none -> tree |> Treex.insert!(priority, :queue.in(value, :queue.new()))
      end

    %{pq | size: n + 1, treex: tree}
  end

  def pop(pq = %__MODULE__{size: 0}), do: {:none, pq}

  def pop(%__MODULE__{size: n, treex: tree}) do
    {priority, queue, tree} = tree |> Treex.take_smallest!()
    {{:value, value}, queue} = :queue.out(queue)

    tree =
      case :queue.is_empty(queue) do
        false -> tree |> Treex.enter(priority, queue)
        true -> tree
      end

    {{:value, priority, value}, %__MODULE__{size: n - 1, treex: tree}}
  end

  def keys(%__MODULE__{treex: tree}), do: tree |> Treex.keys()

  defp values(pq = %__MODULE__{}, list) do
    case pq |> pop() do
      {:none, _} -> list |> :lists.reverse()
      {{:value, _priority, value}, pq} -> values(pq, [value | list])
    end
  end

  def values(pq = %__MODULE__{}) do
    values(pq, [])
  end

  defp pairs(pq = %__MODULE__{}, list) do
    case pq |> pop() do
      {:none, _} -> list |> :lists.reverse()
      {{:value, priority, value}, pq} -> pairs(pq, [{priority, value} | list])
    end
  end

  def pairs(pq = %__MODULE__{}) do
    pairs(pq, [])
  end
end
```

```elixir
pq =
  PriorityQueue.new()
  |> PriorityQueue.push(100, 8)
  |> PriorityQueue.push(1, 1)
  |> PriorityQueue.push(2, 5)
  |> PriorityQueue.push(1, "Philipp")
  |> PriorityQueue.push(2, 6)
  |> PriorityQueue.push(1, 3)
  |> PriorityQueue.push(10, 7)
  |> PriorityQueue.push(1, "Hallo")
  |> PriorityQueue.push(2, "Papagei")

# Show l contents
{{:value, prio, item}, new_queue} = pq |> PriorityQueue.pop()

new_queue |> PriorityQueue.pairs()

pq |> PriorityQueue.pairs()
```

### The `GenServer` wrapped around the `PriorityQueue` data structure

The following module wraps the functional data structure in a `GenServer`.

* [Example](https://medium.com/blackode/2-unique-use-cases-of-genserver-reply-deep-insights-elixir-expert-31e7abbd42d1) on how to use `{:noreply, ...}` in a `handle_call()` callback.

```elixir
defmodule PriorityQueueServer do
  use GenServer
  require Logger

  defstruct priority_queue: nil, requestors: nil

  # Client

  def start_link(), do: GenServer.start_link(__MODULE__, %__MODULE__{})

  def push(pid, priority, value), do: GenServer.cast(pid, {:push, priority, value})

  # , :infinity
  def pop(pid), do: GenServer.call(pid, :pop)

  # Server

  @impl true
  def init(state = %__MODULE__{}), do: {:ok, state}

  @impl true
  def handle_cast(
        {:push, priority, value},
        state = %__MODULE__{priority_queue: priority_queue, requestors: requestors}
      ) do
    case {priority_queue, requestors} do
      {nil, nil} ->
        # A first message is pushed
        priority_queue = PriorityQueue.new() |> PriorityQueue.push(priority, value)
        {:noreply, %{state | priority_queue: priority_queue}}

      {nil, requestors} ->
        # A message arrives while people are waiting
        case :queue.out(requestors) do
          {{:value, requestor}, requestors} ->
            GenServer.reply(requestor, {:value, priority, value})

            requestors =
              case requestors |> :queue.is_empty() do
                true -> nil
                _ -> requestors
              end

            state = %{state | requestors: requestors}
            {:noreply, state}

          {:empty, _} ->
            priority_queue = PriorityQueue.new() |> PriorityQueue.push(priority, value)
            state = %{state | priority_queue: priority_queue}
            {:noreply, state}
        end

      {priority_queue, nil} ->
        priority_queue = priority_queue |> PriorityQueue.push(priority, value)
        state = %{state | priority_queue: priority_queue}
        {:noreply, state}
    end
  end

  @impl true
  def handle_call(
        :pop,
        from,
        state = %__MODULE__{priority_queue: priority_queue, requestors: requestors}
      ) do
    case {priority_queue, requestors} do
      {nil, nil} ->
        # Remember the caller for later
        {:noreply, %{state | requestors: :queue.in(from, :queue.new())}}

      {nil, requestors} ->
        # Remember the caller for later
        {:noreply, %{state | requestors: :queue.in(from, requestors)}}

      {priority_queue, requestors} ->
        case PriorityQueue.empty?(priority_queue) do
          true ->
            requestors =
              case requestors do
                nil -> :queue.in(from, :queue.new())
                requestors -> :queue.in(from, requestors)
              end

            state = %{state | requestors: requestors}
            {:noreply, state}

          false ->
            case PriorityQueue.pop(priority_queue) do
              {:none, _} ->
                requestors = :queue.in(from, requestors)
                state = %{state | requestors: requestors}
                {:noreply, state}

              {{:value, priority, value}, priority_queue} ->
                reply_value = {:value, priority, value}
                state = %{state | priority_queue: priority_queue}
                {:reply, reply_value, state}
            end
        end
    end
  end
end
```

```elixir
defmodule MyTask do
  require Logger

  def launch(name) do
    {:ok, pid} = PriorityQueueServer.start_link()
    Process.register(pid, name)

    name |> PriorityQueueServer.push(1, "Numba 1")
  end

  defp loop(parent, pid) do
    try do
      {:value, priority, value} = pid |> PriorityQueueServer.pop()
      send(parent, {:job, [priority: priority, value: value]})
    catch
      :exit, value ->
        send(parent, {:timeout, value})
    end

    loop(parent, pid)
  end

  def kick_it(pid),
    do:
      Task.async(fn ->
        loop(self(), pid)
      end)

  def receive() do
    receive do
      x -> x
    after
      0 -> :empty
    end
  end
end
```

```elixir
MyTask.launch(:fedex)
%{pid: task} = MyTask.kick_it(:fedex)
task
```

```elixir
Process.alive?(task) |> inspect()
MyTask.receive()
```

## Launch the GenServer

```elixir
{:ok, pid} = PriorityQueueServer.start_link()
```

## Put some data into the GenServer

```elixir
[
  {1, "Top prio #{DateTime.utc_now()}"},
  {10, "Some batch crap  #{DateTime.utc_now()}"},
  {5, "Medium stuff  #{DateTime.utc_now()}"},
  {1, "Yet another important one  #{DateTime.utc_now()}"}
]
|> Enum.map(fn {priority, value} -> pid |> PriorityQueueServer.push(priority, value) end)
```

## Show currently enqueued items

```elixir
pid |> :sys.get_state() |> IO.inspect(label: :full_state)

pid |> :sys.get_state() |> Map.get(:priority_queue) |> PriorityQueue.pairs()
```

<!-- livebook:{"continue_on_error":true} -->

```elixir
case pid |> PriorityQueueServer.pop() do
  {:value, priority, value} ->
    IO.puts("Received #{inspect(value)} with prio #{priority}")
    :ok

  other ->
    IO.puts("Received #{inspect(other)}")
end

pid |> :sys.get_state() |> Map.get(:priority_queue) |> PriorityQueue.pairs()
```
